import{_ as e,o as s,c as a,O as n}from"./chunks/framework.57e84c95.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mainPackage/formula/extensionFormulaInline.md","filePath":"mainPackage/formula/extensionFormulaInline.md"}'),t={name:"mainPackage/formula/extensionFormulaInline.md"},o=n(`<h2 id="extensionformulainline" tabindex="-1">extensionFormulaInline <a class="header-anchor" href="#extensionformulainline" aria-label="Permalink to &quot;extensionFormulaInline&quot;">​</a></h2><p>This code is creating a custom node for the Tiptap editor called <code>TiptapInteractiveKatexInline</code>. The node is defined as an inline element that can be dragged. It has an attribute called <code>katex</code> with a default value of <code>&#39;formulaEditPanel&#39;</code>, which can be parsed from HTML using the <code>parseHTML</code> function. The <code>parseHTML</code> function returns an array with a single object that specifies that the node should be created from a <code>span</code> element that has a <code>data-katex</code> attribute. The <code>renderHTML</code> function defines how the node should be rendered as HTML when the editor content is exported or serialized. It creates a <code>span</code> element with a <code>data-katex</code> attribute set to <code>true</code>, and the <code>katex</code> attribute value is wrapped in <code>$</code> signs to indicate that it is a LaTeX formula. Finally, the <code>addNodeView</code> function returns a VueNodeViewRenderer for the custom node, which is defined in the <code>TiptapInteractiveKatex.vue</code> file.</p><h2 id="addattributes" tabindex="-1">addAttributes() <a class="header-anchor" href="#addattributes" aria-label="Permalink to &quot;addAttributes()&quot;">​</a></h2><p>The code is defining an attribute called <code>katex</code> for the custom node being created. The <code>default</code> value for this attribute is set to <code>&#39;formulaEditPanel&#39;</code>. The <code>parseHTML</code> function is used to extract the value of the <code>katex</code> attribute from the HTML element when the node is being parsed from HTML. In this case, it splits the innerHTML of the element by the <code>$</code> character and returns the second element of the resulting array, which is the value of the <code>katex</code> attribute. This allows the editor to recognize and create the node when importing or deserializing content that contains a <code>span</code> element with a <code>data-katex</code> attribute and a <code>katex</code> attribute value.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addAttributes</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      katex</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        default</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">formulaEditPanel</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">parseHTML</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      inline</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        default</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      editMode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        default</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span></code></pre></div><h2 id="parsehtml" tabindex="-1">parseHTML() <a class="header-anchor" href="#parsehtml" aria-label="Permalink to &quot;parseHTML()&quot;">​</a></h2><p><code>parseHTML()</code> is a method that defines how the node should be parsed from HTML when the editor content is imported or deserialized. In this case, it returns an array with a single object that specifies that the node should be created from a <code>span</code> element that has a <code>data-katex</code> attribute. The <code>getAttrs</code> function checks if the <code>data-katex</code> attribute is present in the element and returns <code>true</code> if it is, which indicates that the node should be created. This allows the editor to recognize and create the node when importing or deserializing content that contains a <code>span</code> element with a <code>data-katex</code> attribute.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseHTML</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        tag</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">getAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data-katex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="renderhtml" tabindex="-1">renderHTML() <a class="header-anchor" href="#renderhtml" aria-label="Permalink to &quot;renderHTML()&quot;">​</a></h2><p>This code defines how the node should be rendered as HTML when the editor content is exported or serialized. It creates a <code>span</code> element with a <code>data-katex</code> attribute set to <code>true</code>, and the <code>katex</code> attribute value is wrapped in <code>$</code> signs to indicate that it is a LaTeX formula. The <code>HTMLAttributes</code> parameter is an object that contains all the attributes defined for the node, and in this case, it retrieves the <code>katex</code> attribute value to be used in the rendered HTML.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseHTML</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        tag</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">getAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data-katex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="addnodeview" tabindex="-1">addNodeView() <a class="header-anchor" href="#addnodeview" aria-label="Permalink to &quot;addNodeView()&quot;">​</a></h2><p>This function returns a VueNodeViewRenderer for TiptapInteractiveKatex.</p><p>returns: The <code>addNodeView()</code> method is returning a Vue component that is used to render a custom node view for Tiptap editor. The component being returned is <code>VueNodeViewRenderer(TiptapInteractiveKatex)</code>, which is a higher-order component that takes <code>TiptapInteractiveKatex</code> as an argument and returns a new component that can be used as a node view in Tiptap.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addNodeView</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">VueNodeViewRenderer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">TiptapInteractiveKatex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div>`,15),l=[o];function p(c,r,i,d,F,y){return s(),a("div",null,l)}const u=e(t,[["render",p]]);export{D as __pageData,u as default};
