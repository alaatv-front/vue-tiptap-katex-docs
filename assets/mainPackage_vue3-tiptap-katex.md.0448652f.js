import{_ as e,o as t,c as a,O as o}from"./chunks/framework.57e84c95.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mainPackage/vue3-tiptap-katex.md","filePath":"mainPackage/vue3-tiptap-katex.md"}'),n={name:"mainPackage/vue3-tiptap-katex.md"},i=o('<h2 id="vuetiptapkatex" tabindex="-1">VueTiptapKatex <a class="header-anchor" href="#vuetiptapkatex" aria-label="Permalink to &quot;VueTiptapKatex&quot;">​</a></h2><p>This is where all the magic happens!</p><p>This is the main component that contains the options below to gather every other components needed in order to define and make the editor as it should be:</p><h2 id="editorcontent-bubblemenu-floatingmenu" tabindex="-1">EditorContent, BubbleMenu, FloatingMenu <a class="header-anchor" href="#editorcontent-bubblemenu-floatingmenu" aria-label="Permalink to &quot;EditorContent, BubbleMenu, FloatingMenu&quot;">​</a></h2><p>all <code>@tiptap</code> components which accept the editor instance as a prop The code has a data property called newTableData. The newTableData property is initialized with the original tableData passed as a prop.</p><h2 id="edit-table-modal" tabindex="-1">edit-table-modal <a class="header-anchor" href="#edit-table-modal" aria-label="Permalink to &quot;edit-table-modal&quot;">​</a></h2><p>A custom component that is being used when a table cell is being edited by the user.</p><h2 id="toolbar" tabindex="-1">toolbar <a class="header-anchor" href="#toolbar" aria-label="Permalink to &quot;toolbar&quot;">​</a></h2><p>all the needed options to be on editor&#39;s toolbar are placed in this custom component. based on each option a specified chain of editor commands is run to execute the desired functionality</p><h2 id="editor-instance" tabindex="-1">Editor instance <a class="header-anchor" href="#editor-instance" aria-label="Permalink to &quot;Editor instance&quot;">​</a></h2><p>The editor instance is being initialized in the <code>mounted()</code> hook, all the necessary plugins are being configured with the <code>extensions</code> option, and at <code>onUpdate({})</code> method we normalize the given context using <code>convertToTiptap</code> method. This created instance is then being passed as prop to all the components that need to use editor&#39;s config, commands and current context.</p>',11),d=[i];function r(s,c,l,h,p,u){return t(),a("div",null,d)}const _=e(n,[["render",r]]);export{b as __pageData,_ as default};
