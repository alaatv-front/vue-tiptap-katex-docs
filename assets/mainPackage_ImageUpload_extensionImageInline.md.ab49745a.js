import{_ as s,o as e,c as a,O as n}from"./chunks/framework.57e84c95.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mainPackage/ImageUpload/extensionImageInline.md","filePath":"mainPackage/ImageUpload/extensionImageInline.md"}'),t={name:"mainPackage/ImageUpload/extensionImageInline.md"},o=n(`<h2 id="extensionimageinline" tabindex="-1">extensionImageInline <a class="header-anchor" href="#extensionimageinline" aria-label="Permalink to &quot;extensionImageInline&quot;">​</a></h2><p>This code exports a custom node for the Tiptap editor in JavaScript. The node is created using the <code>Node.create()</code> method and has various properties such as <code>name</code>, <code>group</code>, <code>atom</code>, <code>inline</code>, and <code>draggable</code>. It also has attributes such as <code>url</code>, <code>width</code>, <code>height</code>, <code>justify</code>, <code>vertical</code>, and <code>horizontal</code>. The <code>parseHTML()</code> method specifies how the node should be parsed from HTML, while the <code>renderHTML()</code> method specifies how it should be rendered as HTML. Finally, the <code>addNodeView()</code> method specifies how the node should be rendered in the editor using a Vue component.</p><h2 id="addattributes-url" tabindex="-1">addAttributes():url <a class="header-anchor" href="#addattributes-url" aria-label="Permalink to &quot;addAttributes():url&quot;">​</a></h2><p>This code is defining the <code>url</code> attribute for the custom node in the Tiptap editor. The <code>parseHTML</code> method is parsing the <code>src</code> attribute of an HTML <code>img</code> element and returning its value as the <code>url</code> attribute of the custom node. The <code>renderHTML</code> method is returning an object with a <code>src</code> property set to the value of the <code>url</code> attribute passed in as an argument. This is used to render the custom node as an <code>img</code> element with the <code>src</code> attribute set to the value of the <code>url</code> attribute.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">parseHTML</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">renderHTML</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">attributes</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          src</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">attributes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="addattributes-vertical-parsehtml" tabindex="-1">addAttributes():vertical:parseHTML <a class="header-anchor" href="#addattributes-vertical-parsehtml" aria-label="Permalink to &quot;addAttributes():vertical:parseHTML&quot;">​</a></h2><p>This code is defining the <code>parseHTML</code> method for the custom node in the Tiptap editor. Specifically, it is parsing the <code>data-vertical</code> attribute of an HTML element and returning its value as an integer.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">parseHTML</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vertical</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">parseInt</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data-vertical</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vertical</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vertical</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="addattributes-vertical-renderhtml" tabindex="-1">addAttributes():vertical:renderHTML <a class="header-anchor" href="#addattributes-vertical-renderhtml" aria-label="Permalink to &quot;addAttributes():vertical:renderHTML&quot;">​</a></h2><p>The code is defining the <code>renderHTML</code> method for the <code>vertical</code> attribute of the custom node in the Tiptap editor. Specifically, it is returning an object with two properties: <code>data-vertical</code> and <code>style</code>. The <code>data-vertical</code> property is set to the value of the <code>vertical</code> attribute passed in as an argument. The <code>style</code> property is a string that sets the <code>vertical-align</code> CSS property to a negative value of the <code>vertical</code> attribute multiplied by -1 and appended with the <code>px</code> unit. This is used to vertically align the custom node in the editor.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">renderHTML</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">attributes</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">data-vertical</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> attributes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vertical</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">vertical-align: </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> attributes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vertical</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">px</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="renderhtml" tabindex="-1">renderHTML() <a class="header-anchor" href="#renderhtml" aria-label="Permalink to &quot;renderHTML()&quot;">​</a></h2><p>The <code>renderHTML()</code> method is defining how the custom node should be rendered as HTML. In this case, it is returning an array with the tag name <code>img</code> and the <code>HTMLAttributes</code> object passed in as an argument, which contains all the attributes of the custom node. The <code>mergeAttributes()</code> function is used to merge the <code>HTMLAttributes</code> object with any additional attributes that may be added later. This ensures that all attributes are included in the final HTML output.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">renderHTML</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> HTMLAttributes </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mergeAttributes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">HTMLAttributes</span><span style="color:#F07178;">)]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="addnodeview" tabindex="-1">addNodeView() <a class="header-anchor" href="#addnodeview" aria-label="Permalink to &quot;addNodeView()&quot;">​</a></h2><p>This function returns a VueNodeViewRenderer for TiptapInteractiveImageUpload.</p><p>returns: The <code>addNodeView()</code> method is returning a Vue component that is used to render a custom node view for Tiptap editor. The component being returned is <code>VueNodeViewRenderer(TiptapInteractiveImageUpload)</code>, which is a higher-order component that takes <code>TiptapInteractiveImageUpload</code> as an argument and returns a new component that can be used as a node view in Tiptap</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addNodeView</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">VueNodeViewRenderer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">TiptapInteractiveImageUpload</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div>`,18),l=[o];function p(r,c,i,d,y,F){return e(),a("div",null,l)}const u=s(t,[["render",p]]);export{h as __pageData,u as default};
