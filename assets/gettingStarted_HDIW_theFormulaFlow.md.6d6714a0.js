import{_ as e,o as a,c as o,O as t}from"./chunks/framework.57e84c95.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"gettingStarted/HDIW/theFormulaFlow.md","filePath":"gettingStarted/HDIW/theFormulaFlow.md"}'),s={name:"gettingStarted/HDIW/theFormulaFlow.md"},n=t(`<h2 id="the-formula-flow" tabindex="-1">the Formula Flow <a class="header-anchor" href="#the-formula-flow" aria-label="Permalink to &quot;the Formula Flow&quot;">​</a></h2><p>simple and neat, here is how your formula turns into html elements in editor:</p><h2 id="_1-loadmathlive" tabindex="-1">1. loadMathLive <a class="header-anchor" href="#_1-loadmathlive" aria-label="Permalink to &quot;1. loadMathLive&quot;">​</a></h2><p>when you open the formula box, you create a TiptapInteractiveKatex node in editor, which has its own custom functionality, when you finish typing your formula and close the mathlive box, a method called <code>loadMathLive()</code> is ran and the mathlive element (<code>Mathfield()</code>) outputs the LaTex of your context. for more info, checkout the documentation of <a href="/vue-tiptap-katex-docs/corePackage/formula/mixin.html">MixinComponentFormula</a>.</p><h2 id="_2-renderhtml" tabindex="-1">2. renderHTML <a class="header-anchor" href="#_2-renderhtml" aria-label="Permalink to &quot;2. renderHTML&quot;">​</a></h2><p>then the value of <code>katex</code> variable will be rendered into the html element below using <code>renderHTML()</code> method defined in our custom tiptap extention (extensionFormulaInline.mjs):</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data-katex</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">your formula</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_3-computedkatex" tabindex="-1">3. computedKatex <a class="header-anchor" href="#_3-computedkatex" aria-label="Permalink to &quot;3. computedKatex&quot;">​</a></h2><p>when you are out of editMode, <code>v-html=&quot;computedKatex&quot;</code> part makes your just-updated katex node attribute to be rendered as html elments and tags using the KaTex library&#39;s <code>renderToString</code> method:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">computedKatex</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">purifiedKatex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mixinConvertToTiptap</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">methods</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceKatexSigns</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">attrs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">katex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">checkMathLivePanelVisibility</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">purifiedKatex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">katex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">renderToString</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">purifiedKatex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                throwOnError</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                safe</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                trust</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_4-onupdate-editor" tabindex="-1">4. onUpdate({ editor }){} <a class="header-anchor" href="#_4-onupdate-editor" aria-label="Permalink to &quot;4. onUpdate({ editor }){}&quot;">​</a></h2><p>meanwhile anytime you change anything in editor, the onUpdate method is being called in which we use the html output of editor (with <code>editor.getHTML()</code> method), and update our model value, with the help of <code>convertToTiptap()</code> method as a normalizer.</p><h2 id="_5-converttotiptap" tabindex="-1">5. convertToTiptap <a class="header-anchor" href="#_5-converttotiptap" aria-label="Permalink to &quot;5. convertToTiptap&quot;">​</a></h2><p>This method is placed in the core file <a href="/vue-tiptap-katex-docs/corePackage/mixins/convertToTiptap.html">convertToTiptap.mjs</a> with the path below:</p><p><code>vue-tiptap-katex-core/mixins/convertToTiptap.mjs</code></p><p>we use this method as a normalizer to make the context tiptap-katex ready. since we use KaTex in order to render LaTex there happens to be a need changing some characters or removing them so our convertor works smoothly and error-freely.</p><p>we basically find the formula context using regex (<code>getRegexPatternForFormula()</code> method), make the necessary changes and then return the context.</p><p>And that&#39;s all for how the flow works. If you need more detailed info, read the docs of each file.</p>`,18),l=[n];function p(r,c,i,d,h,F){return a(),o("div",null,l)}const m=e(s,[["render",p]]);export{y as __pageData,m as default};
