import{_ as s,o as a,c as e,O as n}from"./chunks/framework.57e84c95.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mainPackage/poem/mesra.md","filePath":"mainPackage/poem/mesra.md"}'),o={name:"mainPackage/poem/mesra.md"},t=n(`<h2 id="mesra-mjs" tabindex="-1">mesra.mjs <a class="header-anchor" href="#mesra-mjs" aria-label="Permalink to &quot;mesra.mjs&quot;">​</a></h2><p>These lines of code are creating a custom ProseMirror node called <code>mesra</code>.</p><h2 id="content-inline" tabindex="-1">content: &#39;inline*&#39; <a class="header-anchor" href="#content-inline" aria-label="Permalink to &quot;content: &#39;inline*&#39;&quot;">​</a></h2><p><code>content: &#39;inline*&#39;,</code> is defining the content that can be contained within the <code>mesra</code> node. In this case, it allows for any number of inline nodes to be contained within the <code>mesra</code> node. The <code>*</code> indicates that the content is optional and can be empty.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">inline*</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h2 id="parsehtml" tabindex="-1">parseHTML() <a class="header-anchor" href="#parsehtml" aria-label="Permalink to &quot;parseHTML()&quot;">​</a></h2><p><code>parseHTML()</code> is a method that defines how the node should be parsed from HTML. In this case, it returns an array with an object that represents an HTML element <code>&lt;div&gt;</code> with a class of &quot;mesra&quot;. The <code>getAttrs</code> function is used to check if the element has a class of &quot;mesra&quot;. If it does, it will be parsed as a <code>mesra</code> node. This method is used by the editor to convert HTML content into a ProseMirror document.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseHTML</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        tag</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">getAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">class</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mesra</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="renderhtml" tabindex="-1">renderHTML() <a class="header-anchor" href="#renderhtml" aria-label="Permalink to &quot;renderHTML()&quot;">​</a></h2><p><code>renderHTML()</code> is a method that defines how the node should be rendered as HTML. In this case, it returns an array that represents an HTML element <code>&lt;div&gt;</code> with a class of &quot;mesra&quot; and no content. The <code>0</code> at the end represents the position where the content of the node should be inserted.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">renderHTML</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> class</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mesra</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="addnodeview" tabindex="-1">addNodeView() <a class="header-anchor" href="#addnodeview" aria-label="Permalink to &quot;addNodeView()&quot;">​</a></h2><p>This function returns a VueNodeViewRenderer for mesra.</p><p>returns: A VueNodeViewRenderer component with the parameter &quot;mesra&quot;.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addNodeView</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">VueNodeViewRenderer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">TiptapInteractivePoem</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div>`,15),l=[t];function p(r,c,i,d,F,y){return a(),e("div",null,l)}const m=s(o,[["render",p]]);export{D as __pageData,m as default};
