import{_ as e,o as s,c as a,O as n}from"./chunks/framework.57e84c95.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mainPackage/poem/beit.md","filePath":"mainPackage/poem/beit.md"}'),o={name:"mainPackage/poem/beit.md"},t=n(`<h2 id="bait-mjs" tabindex="-1">bait.mjs <a class="header-anchor" href="#bait-mjs" aria-label="Permalink to &quot;bait.mjs&quot;">​</a></h2><p>This code exports a custom node for the Tiptap editor called <code>TiptapInteractivePoem</code>. It defines how the node should be parsed from HTML using the <code>parseHTML()</code> method, and how it should be rendered as HTML using the <code>renderHTML()</code> method. It also defines a Vue component for the node view using the <code>addNodeView()</code> method, which returns a <code>VueNodeViewRenderer</code> for the <code>TiptapInteractivePoem</code> node. This allows the node to be rendered as a custom Vue component in the editor.</p><h2 id="parsehtml" tabindex="-1">parseHTML() <a class="header-anchor" href="#parsehtml" aria-label="Permalink to &quot;parseHTML()&quot;">​</a></h2><p><code>parseHTML()</code> is a method used by the <code>Node</code> object to define how the node should be parsed from HTML. In this case, it returns an array with a single object that describes how to parse a <code>div</code> element with a class of <code>beit</code>. The <code>getAttrs</code> function is used to determine if the element has the correct class, and if so, it will be parsed as a <code>TiptapInteractivePoem</code> node.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseHTML</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        tag</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">getAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">class</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="renderhtml" tabindex="-1">renderHTML() <a class="header-anchor" href="#renderhtml" aria-label="Permalink to &quot;renderHTML()&quot;">​</a></h2><p><code>renderHTML()</code> is a method used by the <code>Node</code> object to define how the node should be rendered as HTML. In this case, it returns an array with a single <code>div</code> element with a class of <code>beit</code> and a content of <code>0</code>. This means that when the <code>TiptapInteractivePoem</code> node is rendered as HTML, it will be represented as a <code>div</code> element with the class <code>beit</code>. The <code>0</code> in the array represents the content of the node, which in this case is empty.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">renderHTML</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> class</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beit</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="addnodeview" tabindex="-1">addNodeView() <a class="header-anchor" href="#addnodeview" aria-label="Permalink to &quot;addNodeView()&quot;">​</a></h2><p>This function returns a VueNodeViewRenderer for TiptapInteractivePoem.</p><p>returns: The <code>addNodeView()</code> method is returning a Vue component that renders a custom node view for the TiptapInteractivePoem node. The <code>VueNodeViewRenderer</code> is a helper function provided by Tiptap that creates a Vue component for a node view.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addNodeView</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">VueNodeViewRenderer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">TiptapInteractivePoem</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div>`,12),l=[t];function p(c,r,d,i,F,h){return s(),a("div",null,l)}const m=e(o,[["render",p]]);export{D as __pageData,m as default};
